//
// :sdk
//

allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion '0.7.7.201606060606'
    }

    //noinspection GroovyAssignabilityCheck
    group rootProject.ext.groupId
    //noinspection GroovyAssignabilityCheck
    version rootProject.ext.versionName
}

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.dcendents.android-maven'

    def ext = rootProject.ext

    android {
        buildToolsVersion ext.buildToolsVersion

        defaultConfig {
            consumerProguardFiles 'proguard-rules.pro'
        }

        buildTypes {
            release {
                minifyEnabled false
            }
            debug {
                testCoverageEnabled true
            }
        }

        testOptions {
            unitTests {
                all {
                    jvmArgs '-noverify'
                }
                returnDefaultValues = true
            }
        }
    }

    configurations {
        javadocDeps
    }

    dependencies {
        provided "com.android.support:support-annotations:${ext.supportLibVersion}"
        javadocDeps "com.android.support:support-annotations:${ext.supportLibVersion}"

        testCompile 'org.powermock:powermock-api-mockito:1.6.5'
        testCompile 'org.powermock:powermock-module-junit4:1.6.5'
        testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.5'
        testCompile project(':test')

        androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
        androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
        androidTestCompile 'com.android.support.test:runner:0.5'
        androidTestCompile 'com.android.support.test:rules:0.5'
        androidTestCompile project(':test')
    }

    task coverageReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport', 'testDebugUnitTest']) {
        reports {
            xml.enabled = false
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                               "${buildDir}/outputs/code-coverage/connected/coverage.ec"])
    }

    task sourcesJar(type: Jar) {
        afterEvaluate {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }
    }

    task javadoc(type: Javadoc, dependsOn: project.assembleRelease) {
        afterEvaluate {
            source = android.sourceSets.main.java.srcDirs
            classpath += configurations.javadocDeps
            classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")
            //noinspection GroovyAssignabilityCheck
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        //noinspection GroovyAssignabilityCheck
        from javadoc.destinationDir
    }

    // FIXME On some machines the following task dependency seems broken, force it
    bintrayUpload.dependsOn tasks.install

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    bintray {
        user = ext.bintrayUser
        key = ext.bintrayKey

        configurations = ['archives']

        publish = true

        pkg {
            repo = ext.bintrayRepo
            name = ext.bintrayPackageNamePrefix + project.name
            userOrg = ext.bintrayUserOrg
            websiteUrl = ext.siteUrl
            vcsUrl = ext.gitUrl
            licenses = [ext.licenseCode]
        }
    }

    install {
        repositories.mavenInstaller {
            pom {
                //noinspection GroovyAssignabilityCheck
                project {
                    packaging 'aar'

                    //noinspection GroovyAssignabilityCheck
                    name project.name
                    description = ext.sdkDescription
                    url = ext.siteUrl

                    licenses {
                        license {
                            //noinspection GroovyAssignabilityCheck
                            name ext.licenseName
                            url ext.licenseSite
                        }
                    }
                    developers {
                        developer {
                            id ext.developerId
                            //noinspection GroovyAssignabilityCheck
                            name ext.developerName
                            email ext.developerEmail
                        }
                    }
                    scm {
                        connection ext.gitUrl
                        developerConnection ext.gitUrl
                        url ext.siteUrl
                    }
                }
            }
        }
    }
}

// :sdk:coverageReport which combines all coverageReports generated by sub projects
task coverageReport(type: JacocoReport, dependsOn: subprojects.coverageReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    //noinspection GroovyAssignabilityCheck
    sourceDirectories = files(subprojects.coverageReport.sourceDirectories)
    //noinspection GroovyAssignabilityCheck
    classDirectories = files(subprojects.coverageReport.classDirectories)
    //noinspection GroovyAssignabilityCheck
    executionData = files(subprojects.coverageReport.executionData)
}

task clean(type: Delete) {
    delete project.buildDir
}